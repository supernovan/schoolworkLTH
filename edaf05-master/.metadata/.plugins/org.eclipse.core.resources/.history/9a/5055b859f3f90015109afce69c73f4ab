package lab3;

import java.util.*;

public class Graph {
	ArrayList<Vertex> cities;
	public Graph() {
		cities = new ArrayList<Vertex>();
	}
	
	public boolean add(Vertex city) {
		return cities.add(city);
	}
	
	
	
	public Set<Edge> getEdgeTree(int index) {
		return cities.get(index).getL();
	}
	
	public int krus() {
		List<Edge> allSets = new ArrayList<Edge>();
		for (int i = 0; i<cities.size(); i++) {
			allSets.addAll(cities.get(i).getL());
		}
		Collections.sort( allSets);
		ArrayList greedy = new ArrayList(); //kanske behövs till senare
		Set<Vertex> verP = new TreeSet<Vertex>();
		int dist = 0;
		for (int i = 0; i<allSets.size(); i++) {
			Edge e = allSets.get(i);
			if (verP.contains(e.beg) && verP.contains(e.end)) {
				continue;
			}
			
			verP.add(e.beg);
			verP.add(e.end);
			dist += e.getW();
		}
		//merge edgelists
		//sort in 1..2.. osv
		//bygg en ny lista där man undviker cirkulationer
		// Lägg in i HashSet och kolla om båda finns med andra ord.
		//skriv ut längden 
		
		return dist;
	}
}
